#–û–ø–∏—Å–∞–Ω–∏–µ: –í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ª—é–±–æ–π –≥–ª—É–±–∏–Ω—ã.

lst = [1, 2, [1, 2, 3], 4, [1, 2, 3, [1, 2, 3, [1, 2, 3]]]]

def sum_list(lst):
    s = 0
    for x in lst:
        if type(x) == int:
            s += x
        else:
            s += sum_list(x)
    return s


lst = [1, 2, [1, 2, 3],  4,
       [1, 2, 3, [1, 2, 3, [1, 2, 3]]]
       ]

print(sum_list(lst))

#–û–ø–∏—Å–∞–Ω–∏–µ: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏–±–∞–≤–ª—è—Ç—å 1 –∏–ª–∏ 3. –ù–∞–π–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–∏—Ç—å 17 –∏–∑ 1, –ø—Ä–æ–π–¥—è —á–µ—Ä–µ–∑ 9.

def count_paths(x, y):
    if x == y:
        return 1
    if x > y:
        return 0
    else:
        return count_paths(x+1, y) + count_paths(x+3, y)

    
result = count_paths(1, 9) * count_paths(9, 17)
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º: {result}")

#–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—É –ê
cities = '–ê–Ω–∞–ø–∞ –ê–Ω–∞–¥—ã—Ä—å –ú–æ—Å–∫–≤–∞ –ê–±–∞–∫–∞–Ω –ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫ –û–º—Å–∫'
cities = cities.split()

for city in cities:
    if city[0] == '–ê':
        print(city)

cities = filter(lambda x: x[0] == '–ê', cities)

cities = filter(lambda x: x.startswith('–ê'), cities)

print(*cities)


#–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º py
#–∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤ = 'main.py run.py main.bat app.py fastapi.py command.com'



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
string = '1 a1 —Ñb2 –ü–µ—Ç—è ab –ú–∞—à–∞100 abc100 10'.split()

# res = map(lambda x: x.isalpha(), string)

res = filter(str.isascii, string)
res = filter (lambda x: not x.isascii(), string)
print(*res)

quad = '5 10 25 30 49 81 100'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø–æ–ª–Ω—ã–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º
def is_quad(n):
   sqtr_n = int(n ** (1/2))
   return sqtr_n ** 2 == n

# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã

quad = list(map(int, quad.split()))
perfect_squares = filter(is_quad, quad)
print("–ü–æ–ª–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã:", *perfect_squares)  # ['25', '49', '81', '100']

# –ó–∞–¥–∞—á–∞ 7. –ü–æ—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç—ã (+ reduce*)
# = –∫–æ–º–Ω–∞—Ç—ã [
#  {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–∫—É—Ö–Ω—è", "–¥–ª–∏–Ω–∞": 6, "—à–∏—Ä–∏–Ω–∞": 4},
#  {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–∫–æ–º–Ω–∞—Ç–∞ 1", "–¥–ª–∏–Ω–∞": 5,5, "—à–∏—Ä–∏–Ω–∞": 4,5},
#  {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–∫–æ–º–Ω–∞—Ç–∞ 2", "–¥–ª–∏–Ω–∞": 5, "—à–∏—Ä–∏–Ω–∞": 4},
#  {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "–∫–æ–º–Ω–∞—Ç–∞ 3", "–¥–ª–∏–Ω–∞": 7, "—à–∏—Ä–∏–Ω–∞": 6,3},
# ]
# '''

# print(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {total_area} –∫–≤. –º") # 88,25 –∫–≤. –º
square_rooms = map(lambda room: room["length"] * room["width"], rooms)
# print(*square_rooms)

total_square = reduce(lambda s, x: s + x, square_rooms)
print (total_square)

total_square = reduce(lambda acc, room: acc + room["length"] * room["width"], rooms, 0)
print (total_square)


# –ó–∞–¥–∞—á–∞ 3.5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
# –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å (–∏—Å–∫–ª—é—á–∏—Ç—å) –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–µ—Å–æ–º –º–µ–Ω–µ–µ 500

# = items_data [
#  "–∑–æ–Ω—Ç=1000",
#  "–ø–∞–ª–∞—Ç–∫–∞=10000", 
#  "—Å–ø–∏—á–∫–∏=22",
#  "–∫–æ—Ç–µ–ª–æ–∫=543"
# ]
# print(result) # –∑–æ–Ω—Ç –ø–∞–ª–∞—Ç–∫–∞ –∫–æ—Ç–µ–ª–æ–∫

from itertools import product, permutations

content = "üßÄüçÑüçñ"

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 2 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω) 
combos_2 = product(content, repeat=2)
print(*combos_2, sep="\n")
content = "üßÄüçÑüçñ"
# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 2 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω) 
combos_2 = product(content, repeat=2)
print(*combos_2, sep="\n")
# —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å 3 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –Ω–∞ –ø–∏—Ü—Ü–µ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω)
print('------')
combos_3 = permutations(content, 2)
print(*combos_3, sep="\n")

print('------')
combos_4 =  combinations(content, 2)
print(*combos_4, sep="\n")

from random import shuffle, sample
import time

suits = "‚ô†Ô∏è‚ô•Ô∏è‚ô¶Ô∏è‚ô£Ô∏è" # –ü–∏–∫–∏, –ß–µ—Ä–≤—ã, –ë—É–±–Ω—ã, –¢—Ä–µ—Ñ—ã 
values = ('6','7','8','9','10','J','Q','K','A')

cards = list(product(suits, values))
shuffle(cards)
# –∏–∑–≤–ª–µ—á—å 5 –∫–∞—Ä—Ç

while True:
    time.sleep(1)
    sample_cards = sample(cards, 5)
    print(*sample_cards)
    # –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 3 –±—É–±–∏ - –ø–æ–±–µ–¥–∞ ! 
    # —Å—Ç–æ–ø –∏–≥—Ä–∞
    res = filter(lambda x: x[0] == '‚ô¶Ô∏è', sample_cards)
    if len(list(res)) == 3:
        print("–ü–æ–±–µ–¥–∞ !")
        break
    
    
    
    text = '''   
1. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ 2015
2. –†–∏–º 2005
3. –í–µ—Ä—Å–∞–ª—å 2015
4. –¢—é–¥–æ—Ä—ã 2007
5. –¢–µ—Ä—Ä–æ—Ä 2018
6. –ß–µ–ª–æ–≤–µ–∫ –≤ –≤—ã—Å–æ–∫–æ–º –∑–∞–º–∫–µ 2015
7. –ë–µ–ª–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ 2013
8. –ë—Ä–∞—Ç—å—è –ø–æ –æ—Ä—É–∂–∏—é 2001
9. –ú–µ–¥–∏—á–∏ 2016
10. –°–ø–∞—Ä—Ç–∞–∫ 2010
'''




# print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {line_count}")
# print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}") # –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ü–∏—Ñ—Ä—ã
# print(f"–ß–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {char_count}") # –Ω–µ —Å—á–∏—Ç–∞—è –ø—Ä–æ–±–µ–ª—ã

text = text.strip().splitlines()

print(*text,sep='\n')

line_count = len(text)

print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {line_count}")
# print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}") # –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏ # isdigit isalnum
# print(f"–ß–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤: {char_count}") # –Ω–µ —Å—á–∏—Ç–∞—è –ø—Ä–æ–±–µ–ª—ã